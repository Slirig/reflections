GitBash commands

vanligt:
		--global = alla min projekt


ls = visa alla filer i den mappen man befinner sig på
cd = vandra i heirarkien
mkdir namn = Skapa en folder med namn
- Man kan skriva in i bach filen om man vill öppna filer med ett speciellt commando, samt
vilket program man ska öppna med
		-># echo 'alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"' >> ~/.bashrc
	-> tillfälligt används subl för att öppna en fil med sublime text 2
			->exemepl: subl namn.txt


git log = Ser vad för commits som har utförts i ett projekt, börjar med nyaste 
git diff = Man kan se skilnaden mellan 2 stycken commits genom att använda commit koden som man 
	kan se om man använder sig av git log
		-git diff <gammal version> <ny version>
	-> Om man har ändrat filer i sin repostiry och ännu inte lagt till dessa i en commit, då kan man skriva git diff för att se vad som har förändrats i desa filer som inte har tillagda i någon commit ännu, (jämför med filerna som är sparade som commit) -git diff
	-> Om man har addat filer och dessa ligger i staging area och man vill jämföra dessa filer i stagin area med de som är commitade tidigare kan man skriva. -git diff --staged




git clone = kan vi klona ett hel repository
	t.ex. -> git clone https://github.com/udacity/asteroids.git

git checkout = Jag kan använda denna för att gå till en branch eller så kan jag använda denna tillsammans med 
	en gammal git commit nr och få det som är i repositoryn att gå tillbaka till då, tidigare i tiden
		-t.ex. Gå tillbaka till tidigare
				-> git log - hitta commiten
				-> git checkout commmitNr


git init = Skapar en tom git repository i den map du befinner dig i(gitbash)

git add filnamn = lägger till en fil i git staging area, detta är ett stadie 		innan man lägger till filen i sin git repository. Om man skriver git status
	hamnar dessa under flicken changes to be commited:

	-> git commit = kommer att spara filerna som har blivit tillagda i git
		staging area och göra en commit av de.

git reset filnamn = Om man har lagt till en fil i staging area i sin
	repository, kan man ta bort denna där ifrån med git reset filnamn."txt".
	Filen kommer självklart att ligga kvar i mapen.



*Branch commands

git branch = utan ett argument so visar detta vilka mina nuvarande brancher är
	-> den branch som har en * framför är den branchen som du befinner dig på(checkout)

git branch <namn> = kommer skapa en ny branch utifrån den branchen jag befinner mig på
	för tillfället.


git checkout <namn> = kommer förflytta mig till den branchen som har <namnet>

git merge <branch> = Genom att använda sig av git merge kan man slå ihop 2 stycken branches. Man mergar alltid in den branchen eller brancherna som står efter merge in
i den branchen du befinner dig i(checkout). 
	-> T.ex. git merge <branch1> kommer merga in branch1 i den branchen du står vid
			om du vill kan du även ange den branchen du beffiner dig i när du skriver 
			git merge för att få mer koll på vilka du du slår ihop
			-> git merge <branch1> <checkout-branch> ordning spelar ingen roll

	-> Du kan även merga 3 branches på detta sätt
		-> git merge <branch1> <branch2> = kommer merga in dessa 2 brancher i den
		   branchen du beffiner dig i

	-> OM du vill återställa en merge efter du fått en konflikt eller ångrar du dig
		kan du bara använda kommandot git merge --abort


git remote = Används för att skapa och titta vilka remotes ens repository ligger emot
	-> Utan argument, git remote så ser vi alla remotes som vi har
	-> För att lägga till en repository på github så använder vi oss utav add
		t.ex. git remote add <namn> <url> (för att veta vilken repository du refererar till kan det vara smart att ha samna namn här. standard är origin om du bara har en).
	-> för att veta om url är korrekt kan vi köra git remote -v

git push = tar 2 argument, remote som vi vill skicka förändringen till och namnet på 		den lokala branchen du vill pusha
	-> t.ex. git push origin master


git pull = tar 2 argument, remote som du använder dig utav och vilken branch du vill
		ta hem.
		-> t.ex. git pull origin master




git config --global push.default upstream
git config --global merge.conflictstyle diff3
	


*Git

Version control

Commits: När du skickar in en commit så gör du en ändring i filen som ligger på servern, samt
att du skriver vad du har ändrat. Bättre kontroll för vad som har hänt 

repository = flera filer som du vill hålla koll på tillsammans
	-> finns en gömd .git map i ett repository som innehåller all förändring

